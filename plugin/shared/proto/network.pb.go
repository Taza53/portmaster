// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.2
// source: network.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Verdict int32

const (
	Verdict_VERDICT_UNDECIDED         Verdict = 0
	Verdict_VERDICT_UNDETERMINABLE    Verdict = 1
	Verdict_VERDICT_ACCEPT            Verdict = 2
	Verdict_VERDICT_BLOCK             Verdict = 3
	Verdict_VERDICT_DROP              Verdict = 4
	Verdict_VERDICT_REROUTE_TO_NS     Verdict = 5
	Verdict_VERDICT_REROUTE_TO_TUNNEL Verdict = 6
	Verdict_VERDICT_FAILED            Verdict = 7
)

// Enum value maps for Verdict.
var (
	Verdict_name = map[int32]string{
		0: "VERDICT_UNDECIDED",
		1: "VERDICT_UNDETERMINABLE",
		2: "VERDICT_ACCEPT",
		3: "VERDICT_BLOCK",
		4: "VERDICT_DROP",
		5: "VERDICT_REROUTE_TO_NS",
		6: "VERDICT_REROUTE_TO_TUNNEL",
		7: "VERDICT_FAILED",
	}
	Verdict_value = map[string]int32{
		"VERDICT_UNDECIDED":         0,
		"VERDICT_UNDETERMINABLE":    1,
		"VERDICT_ACCEPT":            2,
		"VERDICT_BLOCK":             3,
		"VERDICT_DROP":              4,
		"VERDICT_REROUTE_TO_NS":     5,
		"VERDICT_REROUTE_TO_TUNNEL": 6,
		"VERDICT_FAILED":            7,
	}
)

func (x Verdict) Enum() *Verdict {
	p := new(Verdict)
	*p = x
	return p
}

func (x Verdict) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Verdict) Descriptor() protoreflect.EnumDescriptor {
	return file_network_proto_enumTypes[0].Descriptor()
}

func (Verdict) Type() protoreflect.EnumType {
	return &file_network_proto_enumTypes[0]
}

func (x Verdict) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Verdict.Descriptor instead.
func (Verdict) EnumDescriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{0}
}

type ConnectionType int32

const (
	ConnectionType_CONNECTION_TYPE_UNKNOWN ConnectionType = 0
	ConnectionType_CONNECTION_TYPE_IP      ConnectionType = 1
	ConnectionType_CONNECTION_TYPE_DNS     ConnectionType = 2
)

// Enum value maps for ConnectionType.
var (
	ConnectionType_name = map[int32]string{
		0: "CONNECTION_TYPE_UNKNOWN",
		1: "CONNECTION_TYPE_IP",
		2: "CONNECTION_TYPE_DNS",
	}
	ConnectionType_value = map[string]int32{
		"CONNECTION_TYPE_UNKNOWN": 0,
		"CONNECTION_TYPE_IP":      1,
		"CONNECTION_TYPE_DNS":     2,
	}
)

func (x ConnectionType) Enum() *ConnectionType {
	p := new(ConnectionType)
	*p = x
	return p
}

func (x ConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_network_proto_enumTypes[1].Descriptor()
}

func (ConnectionType) Type() protoreflect.EnumType {
	return &file_network_proto_enumTypes[1]
}

func (x ConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionType.Descriptor instead.
func (ConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{1}
}

type IPVersion int32

const (
	IPVersion_IP_VERSION_UNKNOWN IPVersion = 0
	IPVersion_IP_VERSION_4       IPVersion = 4
	IPVersion_IP_VERSION_6       IPVersion = 6
)

// Enum value maps for IPVersion.
var (
	IPVersion_name = map[int32]string{
		0: "IP_VERSION_UNKNOWN",
		4: "IP_VERSION_4",
		6: "IP_VERSION_6",
	}
	IPVersion_value = map[string]int32{
		"IP_VERSION_UNKNOWN": 0,
		"IP_VERSION_4":       4,
		"IP_VERSION_6":       6,
	}
)

func (x IPVersion) Enum() *IPVersion {
	p := new(IPVersion)
	*p = x
	return p
}

func (x IPVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_network_proto_enumTypes[2].Descriptor()
}

func (IPVersion) Type() protoreflect.EnumType {
	return &file_network_proto_enumTypes[2]
}

func (x IPVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPVersion.Descriptor instead.
func (IPVersion) EnumDescriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{2}
}

type IPScope int32

const (
	IPScope_IP_SCOPE_UNKNOWN          IPScope = 0
	IPScope_IP_SCOPE_HOST_LOCAL       IPScope = 1
	IPScope_IP_SCOPE_LINK_LOCAL       IPScope = 2
	IPScope_IP_SCOPE_SITE_LOCAL       IPScope = 3
	IPScope_IP_SCOPE_GLOBAL           IPScope = 4
	IPScope_IP_SCOPE_LOCAL_MULTICAST  IPScope = 5
	IPScope_IP_SCOPE_GLOBAL_MULTICAST IPScope = 6
)

// Enum value maps for IPScope.
var (
	IPScope_name = map[int32]string{
		0: "IP_SCOPE_UNKNOWN",
		1: "IP_SCOPE_HOST_LOCAL",
		2: "IP_SCOPE_LINK_LOCAL",
		3: "IP_SCOPE_SITE_LOCAL",
		4: "IP_SCOPE_GLOBAL",
		5: "IP_SCOPE_LOCAL_MULTICAST",
		6: "IP_SCOPE_GLOBAL_MULTICAST",
	}
	IPScope_value = map[string]int32{
		"IP_SCOPE_UNKNOWN":          0,
		"IP_SCOPE_HOST_LOCAL":       1,
		"IP_SCOPE_LINK_LOCAL":       2,
		"IP_SCOPE_SITE_LOCAL":       3,
		"IP_SCOPE_GLOBAL":           4,
		"IP_SCOPE_LOCAL_MULTICAST":  5,
		"IP_SCOPE_GLOBAL_MULTICAST": 6,
	}
)

func (x IPScope) Enum() *IPScope {
	p := new(IPScope)
	*p = x
	return p
}

func (x IPScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPScope) Descriptor() protoreflect.EnumDescriptor {
	return file_network_proto_enumTypes[3].Descriptor()
}

func (IPScope) Type() protoreflect.EnumType {
	return &file_network_proto_enumTypes[3]
}

func (x IPScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPScope.Descriptor instead.
func (IPScope) EnumDescriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{3}
}

type Coordinates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccuracyRadius int32   `protobuf:"varint,1,opt,name=accuracy_radius,json=accuracyRadius,proto3" json:"accuracy_radius,omitempty"`
	Latitude       float32 `protobuf:"fixed32,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude      float32 `protobuf:"fixed32,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *Coordinates) Reset() {
	*x = Coordinates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coordinates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coordinates) ProtoMessage() {}

func (x *Coordinates) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coordinates.ProtoReflect.Descriptor instead.
func (*Coordinates) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{0}
}

func (x *Coordinates) GetAccuracyRadius() int32 {
	if x != nil {
		return x.AccuracyRadius
	}
	return 0
}

func (x *Coordinates) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Coordinates) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type IntelEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol      int32        `protobuf:"varint,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Port          int32        `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Domain        string       `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	ReverseDomain string       `protobuf:"bytes,4,opt,name=reverse_domain,json=reverseDomain,proto3" json:"reverse_domain,omitempty"`
	Cnames        []string     `protobuf:"bytes,5,rep,name=cnames,proto3" json:"cnames,omitempty"`
	Ip            string       `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip,omitempty"`
	Scope         IPScope      `protobuf:"varint,7,opt,name=scope,proto3,enum=safing.portmaster.plugin.proto.IPScope" json:"scope,omitempty"`
	Country       string       `protobuf:"bytes,8,opt,name=country,proto3" json:"country,omitempty"`
	Coordinates   *Coordinates `protobuf:"bytes,9,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	Asn           int32        `protobuf:"varint,10,opt,name=asn,proto3" json:"asn,omitempty"`
	AsOwner       string       `protobuf:"bytes,11,opt,name=as_owner,json=asOwner,proto3" json:"as_owner,omitempty"`
}

func (x *IntelEntity) Reset() {
	*x = IntelEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntelEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntelEntity) ProtoMessage() {}

func (x *IntelEntity) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntelEntity.ProtoReflect.Descriptor instead.
func (*IntelEntity) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{1}
}

func (x *IntelEntity) GetProtocol() int32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *IntelEntity) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *IntelEntity) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *IntelEntity) GetReverseDomain() string {
	if x != nil {
		return x.ReverseDomain
	}
	return ""
}

func (x *IntelEntity) GetCnames() []string {
	if x != nil {
		return x.Cnames
	}
	return nil
}

func (x *IntelEntity) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *IntelEntity) GetScope() IPScope {
	if x != nil {
		return x.Scope
	}
	return IPScope_IP_SCOPE_UNKNOWN
}

func (x *IntelEntity) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *IntelEntity) GetCoordinates() *Coordinates {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

func (x *IntelEntity) GetAsn() int32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

func (x *IntelEntity) GetAsOwner() string {
	if x != nil {
		return x.AsOwner
	}
	return ""
}

type ProcessContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Profile     string `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"`
	BinaryPath  string `protobuf:"bytes,3,opt,name=binary_path,json=binaryPath,proto3" json:"binary_path,omitempty"`
	CommandLine string `protobuf:"bytes,4,opt,name=command_line,json=commandLine,proto3" json:"command_line,omitempty"`
	ProcessId   int64  `protobuf:"varint,5,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	Source      string `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *ProcessContext) Reset() {
	*x = ProcessContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessContext) ProtoMessage() {}

func (x *ProcessContext) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessContext.ProtoReflect.Descriptor instead.
func (*ProcessContext) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{2}
}

func (x *ProcessContext) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProcessContext) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *ProcessContext) GetBinaryPath() string {
	if x != nil {
		return x.BinaryPath
	}
	return ""
}

func (x *ProcessContext) GetCommandLine() string {
	if x != nil {
		return x.CommandLine
	}
	return ""
}

func (x *ProcessContext) GetProcessId() int64 {
	if x != nil {
		return x.ProcessId
	}
	return 0
}

func (x *ProcessContext) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type Connection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type       ConnectionType  `protobuf:"varint,2,opt,name=type,proto3,enum=safing.portmaster.plugin.proto.ConnectionType" json:"type,omitempty"`
	External   bool            `protobuf:"varint,3,opt,name=external,proto3" json:"external,omitempty"`
	IpVersion  IPVersion       `protobuf:"varint,4,opt,name=ip_version,json=ipVersion,proto3,enum=safing.portmaster.plugin.proto.IPVersion" json:"ip_version,omitempty"`
	Inbound    bool            `protobuf:"varint,5,opt,name=inbound,proto3" json:"inbound,omitempty"`
	IpProtocol int32           `protobuf:"varint,6,opt,name=ip_protocol,json=ipProtocol,proto3" json:"ip_protocol,omitempty"`
	LocalIp    string          `protobuf:"bytes,7,opt,name=local_ip,json=localIp,proto3" json:"local_ip,omitempty"`
	LocalPort  int32           `protobuf:"varint,8,opt,name=local_port,json=localPort,proto3" json:"local_port,omitempty"`
	Entity     *IntelEntity    `protobuf:"bytes,9,opt,name=entity,proto3" json:"entity,omitempty"`
	Started    uint64          `protobuf:"varint,10,opt,name=started,proto3" json:"started,omitempty"`
	Tunneled   bool            `protobuf:"varint,11,opt,name=tunneled,proto3" json:"tunneled,omitempty"`
	Process    *ProcessContext `protobuf:"bytes,12,opt,name=process,proto3" json:"process,omitempty"`
	Verdict    Verdict         `protobuf:"varint,13,opt,name=verdict,proto3,enum=safing.portmaster.plugin.proto.Verdict" json:"verdict,omitempty"`
}

func (x *Connection) Reset() {
	*x = Connection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection) ProtoMessage() {}

func (x *Connection) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection.ProtoReflect.Descriptor instead.
func (*Connection) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{3}
}

func (x *Connection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Connection) GetType() ConnectionType {
	if x != nil {
		return x.Type
	}
	return ConnectionType_CONNECTION_TYPE_UNKNOWN
}

func (x *Connection) GetExternal() bool {
	if x != nil {
		return x.External
	}
	return false
}

func (x *Connection) GetIpVersion() IPVersion {
	if x != nil {
		return x.IpVersion
	}
	return IPVersion_IP_VERSION_UNKNOWN
}

func (x *Connection) GetInbound() bool {
	if x != nil {
		return x.Inbound
	}
	return false
}

func (x *Connection) GetIpProtocol() int32 {
	if x != nil {
		return x.IpProtocol
	}
	return 0
}

func (x *Connection) GetLocalIp() string {
	if x != nil {
		return x.LocalIp
	}
	return ""
}

func (x *Connection) GetLocalPort() int32 {
	if x != nil {
		return x.LocalPort
	}
	return 0
}

func (x *Connection) GetEntity() *IntelEntity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *Connection) GetStarted() uint64 {
	if x != nil {
		return x.Started
	}
	return 0
}

func (x *Connection) GetTunneled() bool {
	if x != nil {
		return x.Tunneled
	}
	return false
}

func (x *Connection) GetProcess() *ProcessContext {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *Connection) GetVerdict() Verdict {
	if x != nil {
		return x.Verdict
	}
	return Verdict_VERDICT_UNDECIDED
}

var File_network_proto protoreflect.FileDescriptor

var file_network_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1e, 0x73, 0x61, 0x66, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x70, 0x0a, 0x0b, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63,
	0x79, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x22, 0xf9, 0x02, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73, 0x61, 0x66, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x50, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x4d, 0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x61, 0x66, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61,
	0x73, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0xb9, 0x01,
	0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69,
	0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xc3, 0x04, 0x0a, 0x0a, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x73, 0x61, 0x66, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x48, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x73,
	0x61, 0x66, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x50,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x61, 0x66, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x65, 0x64, 0x12, 0x48, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x61, 0x66, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x41, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x73, 0x61, 0x66, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x52, 0x07, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x2a,
	0xc3, 0x01, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x12, 0x15, 0x0a, 0x11, 0x56,
	0x45, 0x52, 0x44, 0x49, 0x43, 0x54, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x43, 0x49, 0x44, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x56, 0x45, 0x52, 0x44, 0x49, 0x43, 0x54, 0x5f, 0x55, 0x4e,
	0x44, 0x45, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x56, 0x45, 0x52, 0x44, 0x49, 0x43, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54,
	0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x45, 0x52, 0x44, 0x49, 0x43, 0x54, 0x5f, 0x42, 0x4c,
	0x4f, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x45, 0x52, 0x44, 0x49, 0x43, 0x54,
	0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x45, 0x52, 0x44, 0x49,
	0x43, 0x54, 0x5f, 0x52, 0x45, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x4e, 0x53,
	0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x56, 0x45, 0x52, 0x44, 0x49, 0x43, 0x54, 0x5f, 0x52, 0x45,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10,
	0x06, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x45, 0x52, 0x44, 0x49, 0x43, 0x54, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x07, 0x2a, 0x5e, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x4e, 0x53, 0x10, 0x02, 0x2a, 0x47, 0x0a, 0x09, 0x49, 0x50, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x50,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x34, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c,
	0x49, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x36, 0x10, 0x06, 0x2a, 0xbc,
	0x01, 0x0a, 0x07, 0x49, 0x50, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x50,
	0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x49, 0x50, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x53,
	0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x50, 0x5f,
	0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c,
	0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x50, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x53,
	0x49, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x49,
	0x50, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10, 0x04,
	0x12, 0x1c, 0x0a, 0x18, 0x49, 0x50, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x43,
	0x41, 0x4c, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x05, 0x12, 0x1d,
	0x0a, 0x19, 0x49, 0x50, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41,
	0x4c, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x06, 0x42, 0x09, 0x5a,
	0x07, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_network_proto_rawDescOnce sync.Once
	file_network_proto_rawDescData = file_network_proto_rawDesc
)

func file_network_proto_rawDescGZIP() []byte {
	file_network_proto_rawDescOnce.Do(func() {
		file_network_proto_rawDescData = protoimpl.X.CompressGZIP(file_network_proto_rawDescData)
	})
	return file_network_proto_rawDescData
}

var file_network_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_network_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_network_proto_goTypes = []interface{}{
	(Verdict)(0),           // 0: safing.portmaster.plugin.proto.Verdict
	(ConnectionType)(0),    // 1: safing.portmaster.plugin.proto.ConnectionType
	(IPVersion)(0),         // 2: safing.portmaster.plugin.proto.IPVersion
	(IPScope)(0),           // 3: safing.portmaster.plugin.proto.IPScope
	(*Coordinates)(nil),    // 4: safing.portmaster.plugin.proto.Coordinates
	(*IntelEntity)(nil),    // 5: safing.portmaster.plugin.proto.IntelEntity
	(*ProcessContext)(nil), // 6: safing.portmaster.plugin.proto.ProcessContext
	(*Connection)(nil),     // 7: safing.portmaster.plugin.proto.Connection
}
var file_network_proto_depIdxs = []int32{
	3, // 0: safing.portmaster.plugin.proto.IntelEntity.scope:type_name -> safing.portmaster.plugin.proto.IPScope
	4, // 1: safing.portmaster.plugin.proto.IntelEntity.coordinates:type_name -> safing.portmaster.plugin.proto.Coordinates
	1, // 2: safing.portmaster.plugin.proto.Connection.type:type_name -> safing.portmaster.plugin.proto.ConnectionType
	2, // 3: safing.portmaster.plugin.proto.Connection.ip_version:type_name -> safing.portmaster.plugin.proto.IPVersion
	5, // 4: safing.portmaster.plugin.proto.Connection.entity:type_name -> safing.portmaster.plugin.proto.IntelEntity
	6, // 5: safing.portmaster.plugin.proto.Connection.process:type_name -> safing.portmaster.plugin.proto.ProcessContext
	0, // 6: safing.portmaster.plugin.proto.Connection.verdict:type_name -> safing.portmaster.plugin.proto.Verdict
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_network_proto_init() }
func file_network_proto_init() {
	if File_network_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_network_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coordinates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntelEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_network_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_network_proto_goTypes,
		DependencyIndexes: file_network_proto_depIdxs,
		EnumInfos:         file_network_proto_enumTypes,
		MessageInfos:      file_network_proto_msgTypes,
	}.Build()
	File_network_proto = out.File
	file_network_proto_rawDesc = nil
	file_network_proto_goTypes = nil
	file_network_proto_depIdxs = nil
}
