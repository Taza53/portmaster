// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.2
// source: resolver.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DNSQuestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type  uint32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Class uint32 `protobuf:"varint,3,opt,name=class,proto3" json:"class,omitempty"`
}

func (x *DNSQuestion) Reset() {
	*x = DNSQuestion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resolver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSQuestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSQuestion) ProtoMessage() {}

func (x *DNSQuestion) ProtoReflect() protoreflect.Message {
	mi := &file_resolver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSQuestion.ProtoReflect.Descriptor instead.
func (*DNSQuestion) Descriptor() ([]byte, []int) {
	return file_resolver_proto_rawDescGZIP(), []int{0}
}

func (x *DNSQuestion) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DNSQuestion) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DNSQuestion) GetClass() uint32 {
	if x != nil {
		return x.Class
	}
	return 0
}

type DNSRR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type  uint32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Class uint32 `protobuf:"varint,3,opt,name=class,proto3" json:"class,omitempty"`
	Ttl   uint32 `protobuf:"varint,4,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Data  []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DNSRR) Reset() {
	*x = DNSRR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resolver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSRR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSRR) ProtoMessage() {}

func (x *DNSRR) ProtoReflect() protoreflect.Message {
	mi := &file_resolver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSRR.ProtoReflect.Descriptor instead.
func (*DNSRR) Descriptor() ([]byte, []int) {
	return file_resolver_proto_rawDescGZIP(), []int{1}
}

func (x *DNSRR) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DNSRR) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DNSRR) GetClass() uint32 {
	if x != nil {
		return x.Class
	}
	return 0
}

func (x *DNSRR) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *DNSRR) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type DNSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rcode uint32   `protobuf:"varint,1,opt,name=rcode,proto3" json:"rcode,omitempty"`
	Rrs   []*DNSRR `protobuf:"bytes,2,rep,name=rrs,proto3" json:"rrs,omitempty"`
}

func (x *DNSResponse) Reset() {
	*x = DNSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resolver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSResponse) ProtoMessage() {}

func (x *DNSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resolver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSResponse.ProtoReflect.Descriptor instead.
func (*DNSResponse) Descriptor() ([]byte, []int) {
	return file_resolver_proto_rawDescGZIP(), []int{2}
}

func (x *DNSResponse) GetRcode() uint32 {
	if x != nil {
		return x.Rcode
	}
	return 0
}

func (x *DNSResponse) GetRrs() []*DNSRR {
	if x != nil {
		return x.Rrs
	}
	return nil
}

type ResolveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Question   *DNSQuestion `protobuf:"bytes,1,opt,name=question,proto3" json:"question,omitempty"`
	Connection *Connection  `protobuf:"bytes,2,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *ResolveRequest) Reset() {
	*x = ResolveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resolver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveRequest) ProtoMessage() {}

func (x *ResolveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resolver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveRequest.ProtoReflect.Descriptor instead.
func (*ResolveRequest) Descriptor() ([]byte, []int) {
	return file_resolver_proto_rawDescGZIP(), []int{3}
}

func (x *ResolveRequest) GetQuestion() *DNSQuestion {
	if x != nil {
		return x.Question
	}
	return nil
}

func (x *ResolveRequest) GetConnection() *Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

type ResolveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *DNSResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *ResolveResponse) Reset() {
	*x = ResolveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resolver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveResponse) ProtoMessage() {}

func (x *ResolveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resolver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveResponse.ProtoReflect.Descriptor instead.
func (*ResolveResponse) Descriptor() ([]byte, []int) {
	return file_resolver_proto_rawDescGZIP(), []int{4}
}

func (x *ResolveResponse) GetResponse() *DNSResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

var File_resolver_proto protoreflect.FileDescriptor

var file_resolver_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1e, 0x73, 0x61, 0x66, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x4b, 0x0a, 0x0b, 0x44, 0x4e, 0x53, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x22, 0x6b, 0x0a, 0x05,
	0x44, 0x4e, 0x53, 0x52, 0x52, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5c, 0x0a, 0x0b, 0x44, 0x4e, 0x53,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x37,
	0x0a, 0x03, 0x72, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x61,
	0x66, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x4e, 0x53,
	0x52, 0x52, 0x52, 0x03, 0x72, 0x72, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x08, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73,
	0x61, 0x66, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x4e,
	0x53, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x61, 0x66, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x5a, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x61, 0x66, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x7f, 0x0a, 0x0f, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6c,
	0x0a, 0x07, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x12, 0x2e, 0x2e, 0x73, 0x61, 0x66, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x73, 0x61, 0x66, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07,
	0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_resolver_proto_rawDescOnce sync.Once
	file_resolver_proto_rawDescData = file_resolver_proto_rawDesc
)

func file_resolver_proto_rawDescGZIP() []byte {
	file_resolver_proto_rawDescOnce.Do(func() {
		file_resolver_proto_rawDescData = protoimpl.X.CompressGZIP(file_resolver_proto_rawDescData)
	})
	return file_resolver_proto_rawDescData
}

var file_resolver_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_resolver_proto_goTypes = []interface{}{
	(*DNSQuestion)(nil),     // 0: safing.portmaster.plugin.proto.DNSQuestion
	(*DNSRR)(nil),           // 1: safing.portmaster.plugin.proto.DNSRR
	(*DNSResponse)(nil),     // 2: safing.portmaster.plugin.proto.DNSResponse
	(*ResolveRequest)(nil),  // 3: safing.portmaster.plugin.proto.ResolveRequest
	(*ResolveResponse)(nil), // 4: safing.portmaster.plugin.proto.ResolveResponse
	(*Connection)(nil),      // 5: safing.portmaster.plugin.proto.Connection
}
var file_resolver_proto_depIdxs = []int32{
	1, // 0: safing.portmaster.plugin.proto.DNSResponse.rrs:type_name -> safing.portmaster.plugin.proto.DNSRR
	0, // 1: safing.portmaster.plugin.proto.ResolveRequest.question:type_name -> safing.portmaster.plugin.proto.DNSQuestion
	5, // 2: safing.portmaster.plugin.proto.ResolveRequest.connection:type_name -> safing.portmaster.plugin.proto.Connection
	2, // 3: safing.portmaster.plugin.proto.ResolveResponse.response:type_name -> safing.portmaster.plugin.proto.DNSResponse
	3, // 4: safing.portmaster.plugin.proto.ResolverService.Resolve:input_type -> safing.portmaster.plugin.proto.ResolveRequest
	4, // 5: safing.portmaster.plugin.proto.ResolverService.Resolve:output_type -> safing.portmaster.plugin.proto.ResolveResponse
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_resolver_proto_init() }
func file_resolver_proto_init() {
	if File_resolver_proto != nil {
		return
	}
	file_network_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_resolver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSQuestion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resolver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSRR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resolver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resolver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resolver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_resolver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_resolver_proto_goTypes,
		DependencyIndexes: file_resolver_proto_depIdxs,
		MessageInfos:      file_resolver_proto_msgTypes,
	}.Build()
	File_resolver_proto = out.File
	file_resolver_proto_rawDesc = nil
	file_resolver_proto_goTypes = nil
	file_resolver_proto_depIdxs = nil
}
